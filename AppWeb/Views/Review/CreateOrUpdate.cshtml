@using Database.Models
@model dynamic

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
    var statusReviews = (List<StatusReview>) ViewData["statusReviews"]!;
    var productGroups = (List<ProductGroup>) ViewData["productGroups"]!;
    var review = (Review) ViewData["review"]!;
    var tags = (string) ViewData["tags"]!;

    var userId = 0;
    if (ViewData["userId"] != null)
    {
        userId = (int) ViewData["userId"]!;
    }

    var reviewId = 0;
    if (ViewData["reviewId"] != null)
    {
        reviewId = (int) ViewData["reviewId"]!;
    }

    var role = (string) "";
    if (ViewData["Role"] != null)
    {
        role = (string) ViewData["Role"]!;
    }

    var id = 0;
    var productId = 0;
    var authorId = 0;
    var statusId = 0;
    var productName = "";
    var title = "";
    var content = "";
    var authorAssessment = 3;
    if (review != null)
    {
        id = review.Id;
        productId = review.ProductId;
        authorId = review.AuthorId;
        statusId = review.StatusId;
        productName = review.ProductName;
        title = review.Title;
        content = review.Content;
        authorAssessment = review.AuthorAssessment;
    }


    var action = (reviewId <= 0) ? "Create" : "Update";
}

<h2>
    @role
    @action
    Review
</h2>

@if (reviewId > 0)
{
    <a asp-controller="Review"
       asp-action="Delete"
       asp-route-id="@id"
       class="btn btn-outline-danger btn-s">
        Delete
    </a>
    <br/>
}

<form asp-controller="Review" asp-action="CreateOrUpdate" method="POST" asp-anti-forgery="true">

    <div class="form-group row col-sm-8 mb-3">
        <label for="StatusReviewId" class="col-sm-2 col-form-label">Status Review:</label>
        <div class="col-sm-5">
            <select
                name="StatusReviewId"
                class="form-select"
                id="StatusReviewId">
                @{
                    foreach (var v in statusReviews)
                    {
                        if (v.Id == statusId)
                        {
                            <option selected="" value="@v.Id">@v.Name</option>
                        }
                        else
                        {
                            <option value="@v.Id">@v.Name</option>
                        }
                    }
                }
            </select>
        </div>
    </div>

    <div class="form-group row col-sm-8 mb-3">
        <label for="ProductId" class="col-sm-2 col-form-label">Product:</label>
        <div class="col-sm-5">
            <select
                name="ProductId"
                class="form-select"
                id="ProductId">
                @{
                    foreach (var v in productGroups)
                    {
                        if (v.Id == productId)
                        {
                            <option selected="" value="@v.Id">@v.Name</option>
                        }
                        else
                        {
                            <option value="@v.Id">@v.Name</option>
                        }
                    }
                }
            </select>
        </div>
    </div>

    <div class="form-group row col-sm-8 mb-3">
        <label for="ProductName" class="col-sm-2 col-form-label">Product Name:</label>
        <div class="col-sm-5">
            <input type="text"
                   class="form-control"
                   placeholder="Product Name"
                   name="ProductName"
                   id="ProductName"
                   maxlength="50"
                   value="@productName"/>
        </div>
    </div>

    <div class="form-group row col-sm-8 mb-3">
        <label for="Title" class="col-sm-2 col-form-label">Title:</label>
        <div class="col-sm-5">
            <input type="text"
                   class="form-control"
                   placeholder="Title"
                   name="Title"
                   id="Title"
                   maxlength="100"
                   value="@title"/>
        </div>
    </div>

    <div class="form-group row col-sm-8 mb-3">
        <input type="hidden" name="TagsInput" id="tagsInput" value="@tags">
        <label for="tagsInput" class="col-sm-2 col-form-label">Tags:</label>
        <div class="col-sm-5">
            <input type="text" class="form-control" placeholder="Tags" id="tagAdd">
        </div>
    </div>

    <div class="form-group row col-sm-8 mb-3">
        <div class="mb-3 tags-wrapper">
            <div class="card-body">
                <div id="tags" class="col-sm-7"></div>
            </div>
        </div>
        <span id="TagsRecoms" class="col-sm-2 card border-primary"></span>
    </div>

    <div class="form-group row col-sm-8 mb-3">
        <label for="Content" class="col-sm-2 col-form-label">Content:</label>
        <div>
            <textarea class="form-control" 
            rows="3"
            name="Content"
            id="Content"
            maxlength="30000">@content</textarea>
        </div>
    </div>

    <div class="form-group row col-sm-8 mb-3">
        <label for="Title" class="col-sm-3 align-self-center">Author Assessment:</label>
        <div class="col-sm-9 align-middle">
            <span class="star-cb-group   form-control-plaintext">
                @{
                    for (var i = 5; i > 0; i--)
                    {
                        if (i == authorAssessment)
                        {
                            <input type="radio" checked="" id="rating-@i" name="AuthorAssessment" value="@i"/>
                            <label for="rating-@i">@i</label>
                        }
                        else
                        {
                            <input type="radio" id="rating-@i" name="AuthorAssessment" value="@i"/>
                            <label for="rating-@i">@i</label>
                        }
                    }
                }
            </span>
        </div>
    </div>

    <input type="hidden" name="AuthorId" id="AuthorId" value="@authorId"/>
    <input type="hidden" name="Id" id="Id" value="@id"/>
    <input type="hidden" name="UserId" id="UserId" value="@userId"/>
    <input type="hidden" name="ReviewId" id="ReviewId" value="@reviewId"/>
    
    <div class="form-group row col-sm-8 mb-5">
        <input type="submit" class="btn btn-primary btn-lg col-sm-3" value="@action"/>
    </div>

</form>

<style>
.star-cb-group {
  font-size: 0;
  unicode-bidi: bidi-override;
  direction: rtl;
}
.star-cb-group * {
  font-size: 1rem;
}
.star-cb-group > input {
  display: none;
}
.star-cb-group > input + label {
  display: inline-block;
  overflow: hidden;
  text-indent: 9999px;
  width: 1em;
  white-space: nowrap;
  cursor: pointer;
  font-size:40px;
}
.star-cb-group > input + label:before {
  display: inline-block;
  text-indent: -9999px;
  content: "☆";
  color: #888;
}
.star-cb-group > input:checked ~ label:before, .star-cb-group > input + label:hover ~ label:before, .star-cb-group > input + label:hover:before {
  content: "★";
  color: #e52;
  text-shadow: 0 0 1px #333;
}
.star-cb-group > .star-cb-clear + label {
  text-indent: -9999px;
  width: .5em;
  margin-left: -.5em;
}
.star-cb-group > .star-cb-clear + label:before {
  width: .5em;
}
.star-cb-group:hover > input + label:before {
  content: "☆";
  color: #888;
  text-shadow: none;
}
.star-cb-group:hover > input + label:hover ~ label:before, .star-cb-group:hover > input + label:hover:before {
  content: "★";
  color: #e52;
  text-shadow: 0 0 1px #333;
}
</style>

<script>
let tags = document.getElementById("tags")
let tagsValues = []
let tagAdd = document.getElementById("tagAdd")
let tagsInput = document.getElementById("tagsInput")

AddTags(JSON.parse(tagsInput.value))

function AddTags(values) {
    for (let v of values) {
        if (v) {
            AddTag(v)
        }
    }
}

function AddTag(v) {
    if (v) {
        tagsValues.push(v)
    }
    tagsValues = tagsValues.filter(function (item, pos) {
        return tagsValues.indexOf(item) === pos;
    })
    tags.innerHTML = ''
    for (let v of tagsValues) {
        tags.innerHTML += `<div class="tag btn btn-secondary mb-1" onclick="tagOnclick(this)">${v}</div>`
    }
    tagsInput.value = JSON.stringify(tagsValues)
}

tagAdd.onkeydown = function (e) {
    if (tagAdd.value.length > 20) {
        e.preventDefault()
    }
    
    if (e.key === ' ') {
        let tags = tagAdd.value.split(' ')
        AddTags(tags)
        tagAdd.value = ''
        TagsRecomHide()
        e.preventDefault()
    }
}

function tagOnclick(element) {
    let value = element.innerHTML

    let index = tagsValues.indexOf(value);
    if (index > -1) {
        tagsValues.splice(index, 1)
    }
    element.remove()
    tagsInput.value = JSON.stringify(tagsValues)
}
</script>
<style>
    .tag
    {
        background: lightgray;
        display: inline-block;
        margin-right: 5px;
        border: none;
        color: black;
    }
    #TagsRecoms{
        display: none;
        position: absolute;
        margin: 10px;
        z-index: 100;
    }
    .TagsRecom
    {
        cursor: pointer;
        padding: 5px;
    }
    .TagsRecom:hover{
        font-weight: bold;
    }
</style>


<script src="https://cdn.tiny.cloud/1/gntgkxs4ydn0xy7uodmu2ozzzkx6hbyfkjfqrp4w42io86y9/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
<script>
tinymce.init({
    selector: '#Content',
    height: 500,
    resize: false,
    plugins: ['advlist', 'anchor', 'autolink', 'charmap', 'code', 'fullscreen', 'image', 'imagetools', 'insertdatetime', 'link', 'lists', 'media', 'powerpaste', 'preview', 'print', 'searchreplace', 'table', 'visualblocks', 'wordcount'],
    toolbar: 'insertfile undo redo | forecolor backcolor | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
    file_picker_types: 'image',
    images_upload_handler: example_image_upload_handler,
})

function example_image_upload_handler(blobInfo, success, failure, progress) {
    let xhr, formData;
    xhr = new XMLHttpRequest();
    xhr.withCredentials = false;
    xhr.open('POST', '/Images/Upload');
    xhr.upload.onprogress = function (e) {
        progress(e.loaded / e.total * 100);
    };
    xhr.onload = function () {
        let json;
        if (xhr.status === 403) {
            failure('HTTP Error: ' + xhr.status, {remove: true});
            return;
        }
        if (xhr.status < 200 || xhr.status >= 300) {
            failure('HTTP Error: ' + xhr.status);
            return;
        }
        json = JSON.parse(xhr.responseText);
        if (!json || typeof json.location != 'string') {
            failure('Invalid JSON: ' + xhr.responseText);
            return;
        }
        success(json.location);
    };
    xhr.onerror = function () {
        failure('Image upload failed due to a XHR Transport error. Code: ' + xhr.status);
    };
    formData = new FormData();
    formData.append('file', blobInfo.blob(), blobInfo.filename());
    xhr.send(formData);
}
</script>