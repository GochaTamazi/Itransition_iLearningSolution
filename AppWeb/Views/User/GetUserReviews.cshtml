@using Database.Models
@model dynamic
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer _localizer

@{
    ViewBag.Title = _localizer["User Reviews"];
    Layout = "_Layout";
    var reviews = (List<Review>) ViewData["reviews"]!;
    var productGroups = (Dictionary<int, ProductGroup>) ViewData["productGroups"]!;
    var userId = (int) ViewData["userId"]!;
}

<h2>@_localizer["User Reviews"]</h2>

<style>
th {
  cursor: pointer;
}
</style>

<p>
    <a asp-controller="Review" asp-action="CreateOrUpdate"
       asp-route-userId="@userId"
       asp-route-reviewId="0">
        @_localizer["Create Review"]
    </a>
</p>

<p>
    <strong>
        @_localizer["Click the headers to sort the table."]
    </strong>
</p>

<p>
    @_localizer["First click, the sorting is ascending (A to Z). Click again, the sorting will be descending (Z to A)."]
</p>

<table class="table table-hover" id="myTable">
    <thead>
    
    <tr>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="Id"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["Product"]"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["Status"]"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["Name"]"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["Title"]"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["Creation"]"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["Redaction"]"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["Author Assessment"]"/>
            </div>
        </th>
        <th>
            <div class="form-group">
                <input type="text" class="form-control form-control-sm SearchInput" onkeyup="myFunction()" placeholder="@_localizer["User Assessment"]"/>
            </div>
        </th>
    </tr>

    <tr>
        <th scope="col" onclick="sortTable(0, 'int')">Id</th>
        <th scope="col" onclick="sortTable(1)">@_localizer["Product"]</th>
        <th scope="col" onclick="sortTable(2)">@_localizer["Status"]</th>
        <th scope="col" onclick="sortTable(3)">@_localizer["ProductName"]</th>
        <th scope="col" onclick="sortTable(4)">@_localizer["Title"]</th>
        <th scope="col" onclick="sortTable(5)">@_localizer["CreationDate"]</th>
        <th scope="col" onclick="sortTable(6)">@_localizer["RedactionDate"]</th>
        <th scope="col" onclick="sortTable(7)">@_localizer["AuthorAssessment"]</th>
        <th scope="col" onclick="sortTable(8)">@_localizer["AverageUserRating"]</th>
    </tr>
    
    </thead>
    
    <tbody>
    @foreach (var review in reviews)
    {
        <tr>
            <td>
                <a asp-controller="Review" asp-action="CreateOrUpdate"
                   asp-route-userId="@userId"
                   asp-route-reviewId="@review.Id">
                    @review.Id
                </a>
            </td>
            <td>@productGroups[review.ProductId].Name</td>
            <td>@review.Status.Name</td>
            <td>@review.ProductName</td>
            <td>@review.Title</td>
            <td>@review.CreationDate</td>
            <td>@review.RedactionDate</td>
            <td>@review.AuthorAssessment</td>
            <td>@review.AverageUserRating</td>
        </tr>
    }
    </tbody>
    
</table>


<script>
function myFunction() {
    let searchInputs = document.getElementsByClassName("SearchInput")
    let table = document.getElementById("myTable");
    let trAll = table.getElementsByTagName("tr");

    for (let tr of trAll) {
        tr.style.display = "";
    }
    
    for (let index = 0; index < searchInputs.length; index++) {
        let filter = searchInputs[index].value.toLowerCase()
        if (filter <= 0) {
            continue
        }

        for (let tr of trAll) {
            let td = tr.getElementsByTagName("td")[index];
            if (td) {
                let txtValue = td.textContent || td.innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    //tr.style.display = "";
                } else {
                    tr.style.display = "none";
                }
            }
        }

    }
}

function sortTable(n, type) {
    let table, rows, switching, i, x, y, shouldSwitch, dir, switchCount = 0;
    table = document.getElementById("myTable");
    switching = true;
    dir = "asc";
    while (switching) {
        switching = false;
        rows = table.rows;
        for (i = 2; i < (rows.length - 1); i++) {
            shouldSwitch = false;
            x = rows[i].getElementsByTagName("TD")[n].innerHTML.toLowerCase();
            y = rows[i + 1].getElementsByTagName("TD")[n].innerHTML.toLowerCase();
            if (dir === "asc" && x > y) {
                shouldSwitch = true;
                break;
            } else if (dir === "desc" && x < y) {
                shouldSwitch = true;
                break;
            }
        }
        if (shouldSwitch) {
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
            switchCount++;
        } else {
            if (switchCount === 0 && dir === "asc") {
                dir = "desc";
                switching = true;
            }
        }

    }
}
</script>